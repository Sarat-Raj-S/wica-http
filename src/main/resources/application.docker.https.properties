# Docker Secure RUN Profile
# =========================

# Spring Boot Framework Configuration
# -----------------------------------

# The host the service will run on. This is the address that the Spring Boot internal
# Tomcat server will bind to. This is the Docker bridge IP.
# note: the address will increment by 1 for each configured service in the
# container.
server.address=                                              0.0.0.0

# The port the service will run on. This is the port that the Spring Boot internal
# Tomcat server will bind to.
server.port=                                                 443

# The following settings were defined in order to get the service to operate using https
# and SSL. This task proved non-trivial: see the SF_DEPLOYMENT.md file for further details.
# Note: the cipher list was extended because initial attempts were found to be incompatible
# with Google Chrome (which seems particularly picky).
server.ssl.enabled=                                          true
server.ssl.key-store-type=                                   PKCS12
server.ssl.ciphers=                                          ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA
server.ssl.protocol=                                         TLS
server.ssl.enabled-protocols=                                TLSv1.2

# Should be overridden through by specifying external volume mount on docker run line.
# Thus: docker run etc etc -v ~/config:/home/deployer/config etc etc
server.ssl.key-store=                                        config/keystore.jks

# Should be overridden by specifying KEYSTORE_PASS argument on docker run line.
# Thus: docker run etc etc -e KEYSTORE_PASS='XXXXXX' etc etc
server.ssl.key-store-password=                               XXXXXX

# Turn ON/OFF support for serving HTTP2 protocol. Only possible when SSL enabled.
server.http2.enabled=                                        false

# The logging configuration file. Currently uses Logback.
logging.config=                                              config/logback_config.xml

# Turn On/Off JSON "pretty printing" when returning JSON representations of the deployment
# log, service configuration list etc
spring.jackson.serialization.indent-output=                  true

# Locations which SpringBoot will use for serving static content. The list below caters
# for serving files bundled up as part of the Wica jar file (eg wica.jss, wica.css) and also
# files from the containers '/root/web' directory.
spring.resources.static-locations=                           /root/web,classpath:static

# The following definition turns on the cacheing policy. For the moment this is set
# very conservatively. Much more sophisticated policies are possible.
spring.resources.cache.cachecontrol.max-age=                 360s

# Spring Boot Actuator configuration. Turn on support for showing everything but sanitize exposure of keystore password.
management.endpoints.web.exposure.include=                   *
management.endpoint.health.show-details=                     always
management.endpoint.env.keys-to-sanitize=                    KEYSTORE_PASS,password,secret,key,token,.*credentials.*,vcap_services,sun.java.command

# Add support for monitoring diskspace.
# Note: the SpringBoot actuator only seems to support reporting on the health status a single directory path.
# The implementation is unable to determine the health status of the filesystem when the container host
# maps it onto another file system eg the autodeployer's target path. For the moment the configuration setting
# here has been chosen so that it will report if the logging area gets full.
management.health.diskspace.enabled=                         true
management.health.diskspace.path=                            /root/log

# Add support for prometheus
management.endpoint.metrics.enabled=                         true
management.endpoint.prometheus.enabled=                      true
management.metrics.export.prometheus.enabled=                true

# Support for sending actuator data to SpringBoot Admin Visualisation Server
# This is currently (2018-10-04) turned OFF since the details are hardcoded on the server end
# spring.boot.admin.client.url:                               "http://gfa-app-09.psi.ch:8080"
# spring.boot.admin.client.service-url                        "https://gfa-wica.psi.ch"

# Wica Server data compression settings
#
# Note: it's important to be sure text/event-stream is in this list !
#
server.compression.enabled=                                  true
server.compression.min-response-size=                        2048
server.compression.mime-types=                               application/json,application/xml,text/html,text/xml,text/plain,text/event-stream,application/javascript,text/css


# Application-Specific Configuration
# ----------------------------------

# Can be used to enable a test of logger performance when the application is started.
wica.test-logging-on-startup=                                false

# The configuration for PSI's CA library when using it to establish channel access monitors.
wica.epics-ca-library-monitor-notifier-impl=                 BlockingQueueMultipleWorkerMonitorNotificationServiceImpl,16,10

# The configuration for PSI's CA library when logging.
wica.epics-ca-library-debug-level=                            0

# The number of values that can be held in the control system monitored value buffer before older values
# start getting thrown away.
wica.channel-monitored-value-buffer-size=                     64

# The number of values that can be held in the control system polled value buffer before older values
# start getting thrown away.
wica.channel-polled-value-buffer-size=                        64

# The default timeout in milliseconds to be applied when getting the current value of a wica channel.
wica.channel-get-timeout-interval-in-ms=                      3000

# The numeric scale in digits to be used
wica.channel-get-numeric-scale=                               8

# Semicolon separated list specifying the default names of the fields that will be returned when getting the
# current value of a wica channel.
wica.channel-get-fields-of-interest=                          type;val;sevr;ts

# The default timeout in milliseconds to be applied when putting a new value to a wica channel.
wica.channel-put-timeout-interval-in-ms=                      3000

# Whether strict JSON compliance should be used when serializing NaN and Infinity values (=true) or
# whether JSON5 serialization compliance is acceptable (=false). For strict JSON compliance this
# option should be turned on. However, the Wica JS library supports JSON5 which allows greater
# flexibility, so for this reason the option is disabled.
wica.stream-quote-numeric-strings=                            false

# The fields of interest that should be serialized when sending the channel metadata.
# Currently (2019-08-22) this is everything but the WicaServerTimestamp (wsts) field.
wica.stream-metadata-fields-of-interest=                      type;egu;prec;hopr;lopr;drvh;drvl;hihi;lolo;high;low

# Which origins must be present in the http request header in order for a request to be accepted.
# Additional Notes:
# [1] The definition below means that when Safari and Chrome load a web age from ANY webserver they
# will be able to make XHR and SSE requests on this server.
# [2] Firefox is pickier: as '*' is not an allowed origin the origins must be enabled by hand.
wica.allowed-origins=                                          *

