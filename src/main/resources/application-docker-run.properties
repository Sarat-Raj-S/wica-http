# Docker Production RUN Profile
# =============================

# Spring Boot Framework Configuration
# -----------------------------------

# The host the service will run on. This is the address that the Spring Boot internal
# Tomcat server will bind to. This is the Docker bridge IP.
# note: the address will increment by 1 for each configured service in the
# container.
server.address=                                              172.17.0.2

# The port the service will run on. This is the port that the Spring Boot internal
# Tomcat server will bind to.
server.port=                                                 8443

# The following settings were defined in order to get the service to operate using https
# and SSL. This task proved non-trivial: see the SF_DEPLOYMENT.md file for further details.
# Note: the cipher list was extended because initial attempts were found to be incompatible
# with Google Chrome (which seems particularly picky).
server.ssl.enabled=                                          true
server.ssl.key-store-type=                                   PKCS12
server.ssl.key-alias=                                        tomcat
server.ssl.ciphers=                                          ECDHE_RSA_WITH_AES_256_CBC_SHA384,TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA,TLS_RSA_WITH_AES_256_CBC_SHA256,TLS_RSA_WITH_AES_256_CBC_SHA
server.ssl.protocol=                                         TLS
server.ssl.enabled-protocols=                                TLSv1.2

# Turn on support for serving HTTP2 protocol
#
server.http2.enabled=                                        false


# Should be overridden through by specifying external volume mount on docker run line.
# Thus: docker run etc etc -v ~/config:/home/deployer/config etc etc
server.ssl.key-store=                                        config/keystore.jks

# Should be overridden by specifying KEYSTORE_PASS argument on docker run line.
# Thus: docker run etc etc -e KEYSTORE_PASS='XXXXXX' etc etc
server.ssl.key-store-password=                               XXXXXX

# The logging configuration file. Currently uses Logback.
logging.config=                                              config/docker_logback_config.xml

# Turn On/Off JSON "pretty printing" when returning JSON representations of the deployment
# log, service configuration list etc
spring.jackson.serialization.indent_output=                  true

# Spring Boot Actuator configuration. Enable everything for the moment
management.endpoints.web.exposure.include=                   *

# Support for sending actuator data to SpringBoot Admin Visualisation Server
# This is currently (2018-10-04) turned OFF since the details are hardcoded on the server end
# spring.boot.admin.client.url:                               "http://gfa-app-09.psi.ch:8080"
# spring.boot.admin.client.service-url                        "https://gfa-wica.psi.ch"

# Wica Server data compression settings
#
# Note: it's important to be sure text/event-stream is in this list !
#
server.compression.enabled=                                  true
server.compression.min-response-size=                        2048
server.compression.mime-types=                               application/json,application/xml,text/html,text/xml,text/plain,text/event-stream,application/javascript,text/css


# Application-Specific Configuration
# ----------------------------------

wica.heartbeat_flux_interval_in_ms=                          10000
wica.channel_metadata_flux_interval_in_ms=                   15000
wica.channel_value_flux_interval_in_ms=                       5000
wica.channel_value_update_flux_interval_in_ms=                 100
